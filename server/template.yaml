# prettier-ignore
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    BuildLog

    Holds the lambda and s3 functions for the server

Globals:
    Function:
        Timeout: 20
        MemorySize: 128
        CodeUri: aws/lambda/
        Runtime: nodejs18.x
        Architectures: [x86_64]
        Environment:
            Variables:
                REGION_NAME: 'ap-southeast-2'
                DYNAMO_TABLE: !Ref PostsDynamoDbTable
                DYNAMO_TABLE_NAME: 'post-tables'
                S3_BUCKET_NAME: 's3-lambda-stack-srcbucket-dpcaitz3x0hb'
Resources:
    S3ImageUploaderFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: aws/lambda/
            Handler: posts.s3_image_uploader
            Policies: 
                - Version: '2012-10-17'
                  Statement:
                    - Effect: Allow
                      Action: 's3:*'
                      Resource: '*'
            Events:
                S3ImageUploaderFunctionEvents:
                    Type: Api
                    Properties:
                        Path: /uploadImageToS3
                        Method: POST

    UploadPostToDynamo:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: aws/lambda/
            Policies:
                - DynamoDBCrudPolicy:
                    TableName: !Ref PostsDynamoDbTable
            Handler: posts.save_post_to_dynamodb
            Events:
                UploadPostToDynamoEvents:
                    Type: Api
                    Properties:
                        Path: /uploadPostToDynamo
                        Method: POST

    GetPostsFromDynamo:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: aws/lambda/
            Policies:
                - DynamoDBCrudPolicy:
                    TableName: !Ref PostsDynamoDbTable
            Handler: posts.get_posts_from_dynamodb
            Events:
                GetPostsFromDynamoEvents:
                    Type: Api
                    Properties:
                        Path: /getPostsFromDynamodb
                        Method: GET
    
    GetTableDataFromDynamo:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: aws/lambda/
            Policies:
                - DynamoDBCrudPolicy:
                    TableName: !Ref PostsDynamoDbTable
            Handler: table.get_table_data
            Events:
                UploadPostToDynamoEvents:
                    Type: Api
                    Properties:
                        Path: /getTableData
                        Method: GET

    DeletePostFromDynamo:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: aws/lambda/
            Policies:
                - DynamoDBCrudPolicy:
                    TableName: !Ref PostsDynamoDbTable
            Handler: posts.delete_post_from_dynamodb
            Events:
                DeletePostFromDynamoEvents:
                    Type: Api
                    Properties:
                        Path: /deletePostFromDynamodb/{id}
                        Method: DELETE

    UpdatePostInDynamo:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: aws/lambda/
            Policies:
                - DynamoDBCrudPolicy:
                    TableName: !Ref PostsDynamoDbTable
            Handler: posts.update_post_in_dynamodb
            Events:
                UpdatePostInDynamoEvents:
                    Type: Api
                    Properties:
                        Path: /updatePostInDynamodb/{id}
                        Method: PUT
    
    GetImageFromS3:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: aws/lambda/
            Policies:
                - DynamoDBReadPolicy:
                    TableName: !Ref PostsDynamoDbTable
            Handler: posts.s3_get_image
            Events:
                GetImageFromS3Events:
                    Type: Api
                    Properties:
                        Path: /images/{id}
                        Method: GET
    SrcBucket:
        Type: AWS::S3::Bucket

    PostsDynamoDbTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
            KeySchema:
                - AttributeName: id
                  KeyType: HASH
            ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5
            TableName: 'post-tables'
# Outputs:
#     # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#     # Find out more about other implicit resources you can reference within SAM
#     # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#     ImageApi:
#         Description: 'API Gateway endpoint URL for Prod stage for ImageaApi function'
#         Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/image/'
#     S3ImageUploaderFunction:
#         Description: 'S3ImageUploaderFunction Lambda Function ARN'
#         Value: !GetAtt S3ImageUploaderFunction.Arn
